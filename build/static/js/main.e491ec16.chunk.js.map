{"version":3,"sources":["components/TitleBar/TitleBar.module.scss","elements/PostButton/PostButton.module.scss","containers/ContentDisplay.module.scss","components/Post/PostShow.module.scss","components/TitleBar/DateTime.js","components/TitleBar/TitleBar.js","actions/index.js","elements/PostButton/PostButton.js","containers/PostCard.js","components/Post/PostShow.js","containers/ContentDisplay.js","components/App/App.js","serviceWorker.js","index.js","reducers/posts_reducer.js","reducers/select_post_reducer.js","containers/PostCard.module.scss"],"names":["module","exports","newsletterHead","title","timeStamp","button","regular","on","delete","content","contentFlex","divider","body","secondLine","author","buttonsWrapper","text","statusLine","article-source","article-footer","article-link","star","star-on","currentTimestamp","props","hours","d","Date","minutes","getMinutes","toString","length","ampm","getHours","getDay","getMonth","getDate","getFullYear","TitleBar","react_default","a","createElement","className","styles","id","DateTime","React","Component","setPosts","postsUrl","concat","process","console","log","type","payload","fetch","then","r","json","selectPost","post","postButton","buttonStyle","value","style","months","1","2","3","4","5","6","7","8","9","10","11","12","daysOfWeek","PostCard","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","substring","replace","bodyClass","bodyFlex","datePublished","published","timeToDisplay","dateToDisplay","onClick","PostButton","dangerouslySetInnerHTML","__html","Math","round","connect","state","selectedPost","dispatch","bindActionCreators","postShow","ContentDisplay","fetchMessages","refresher","setInterval","clearInterval","posts","map","containers_PostCard","key","PostShow","App","TitleBar_TitleBar","containers_ContentDisplay","Boolean","window","location","hostname","match","WebFont","load","google","families","reducers","combineReducers","arguments","undefined","action","middlewares","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","reduxPromise","logger","ReactDOM","render","es","store","createStore","components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e491ec16.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"newsletterHead\":\"TitleBar_newsletterHead__Zupct\",\"title\":\"TitleBar_title__3MWB3\",\"timeStamp\":\"TitleBar_timeStamp__wN8_N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"PostButton_button__1Coz8\",\"regular\":\"PostButton_regular__3XV0H\",\"on\":\"PostButton_on__xdHSN\",\"delete\":\"PostButton_delete__2qrbt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newsletterHead\":\"ContentDisplay_newsletterHead__2vZVP\",\"title\":\"ContentDisplay_title__3wYFZ\",\"timeStamp\":\"ContentDisplay_timeStamp__1rMcI\",\"content\":\"ContentDisplay_content__3t__o\",\"contentFlex\":\"ContentDisplay_contentFlex__2Xkhc\",\"divider\":\"ContentDisplay_divider__2RSUZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"PostShow_body__1YwZW\",\"title\":\"PostShow_title__B-4Nv\",\"secondLine\":\"PostShow_secondLine__36yYf\",\"author\":\"PostShow_author__36LD_\",\"buttonsWrapper\":\"PostShow_buttonsWrapper__1hwMA\",\"text\":\"PostShow_text__3S3RC\",\"divider\":\"PostShow_divider__cAg_i\",\"statusLine\":\"PostShow_statusLine__5voQh\",\"article-source\":\"PostShow_article-source__lbSj1\",\"article-footer\":\"PostShow_article-footer__1gfk6\",\"article-link\":\"PostShow_article-link__18DZo\",\"star\":\"PostShow_star__2NoJ1\",\"star-on\":\"PostShow_star-on__3PHbT\"};","const currentTimestamp = props => {\n  var hours = 0;\n  var d = new Date(),\n    minutes =\n      d.getMinutes().toString().length === 1\n        ? '0' + d.getMinutes()\n        : d.getMinutes(),\n    ampm = d.getHours() >= 12 ? 'pm' : 'am',\n    months = [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December'\n    ],\n    days = [\n      'Sunday',\n      'Monday',\n      'Tueday',\n      'Wedday',\n      'Thuday',\n      'Friday',\n      'Saturday'\n    ];\n  if (d.getHours() === 0) {\n    hours = 12;\n  } else if (d.getHours() > 12) {\n    hours = d.getHours() - 12;\n  } else {\n    hours = d.getHours();\n  }\n  return (\n    days[d.getDay()] +\n    ', ' +\n    months[d.getMonth()] +\n    ' ' +\n    d.getDate() +\n    ', ' +\n    d.getFullYear() +\n    ' | ' +\n    hours +\n    ':' +\n    minutes +\n    ampm\n  );\n};\n\nexport default currentTimestamp;\n","import React from 'react';\n\nimport DateTime from './DateTime';\nimport styles from './TitleBar.module.scss';\n\nexport default class TitleBar extends React.Component {\n  render() {\n    return (\n      <div className={styles.newsletterHead}>\n        <div className={styles.title} id=\"title\">\n          The Newsletter\n        </div>\n        <div className={styles.timeStamp}>\n          <DateTime />\n        </div>\n      </div>\n    );\n  }\n}\n","export function setPosts() {\n  const postsUrl = `${process.env.REACT_APP_API_URL}/sources/freeCodeCamp`;\n\n  console.log(postsUrl);\n\n  const promise = fetch(postsUrl).then(r => r.json());\n\n  return {\n    type: 'SET_POSTS',\n    payload: promise\n  };\n}\n\nexport function selectPost(post) {\n  return {\n    type: 'SELECT_POST',\n    payload: post\n  };\n}\n","import React from 'react';\n\nimport style from './PostButton.module.scss';\n\nconst postButton = props => {\n  let button = '';\n  let buttonStyle = '';\n  switch (props.type) {\n    case 'star':\n      button = 'fas fa-star';\n      if (props.value) {\n        buttonStyle = style.on;\n      } else {\n        buttonStyle = style.regular;\n      }\n      break;\n    default:\n      button = 'far fa-trash-alt';\n      buttonStyle = style.delete;\n  }\n  return (\n    <div className={buttonStyle}>\n      <i className={button} />\n    </div>\n  );\n};\n\nexport default postButton;\n","import React from 'react';\n// Redux\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\n// Actions\nimport { selectPost } from '../actions';\n\nimport PostButton from '../elements/PostButton/PostButton';\nimport style from './PostCard.module.scss';\nconst months = {\n  1: 'Jan',\n  2: 'Feb',\n  3: 'Mar',\n  4: 'Apr',\n  5: 'May',\n  6: 'Jun',\n  7: 'Jul',\n  8: 'Aug',\n  9: 'Sep',\n  10: 'Oct',\n  11: 'Nov',\n  12: 'Dec'\n};\nconst daysOfWeek = {\n  1: 'Sun',\n  2: 'Mon',\n  3: 'Tue',\n  4: 'Wed',\n  5: 'Thu',\n  6: 'Fri',\n  7: 'Sat'\n};\nclass PostCard extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  handleClick = () => {\n    this.props.selectPost(this.props.post);\n  };\n  render() {\n    const text = this.props.post.text\n      .substring(0, 800)\n      .replace(/<(?:.|\\n)*?>/gm, '');\n    // <div>{props.post.read}</div>;\n    const bodyClass = style.bodyFlex;\n    // < div className = { style.star } > { props.post.star }</div>\n    const star = 'fas fa-star';\n    const datePublished = new Date(this.props.post.published);\n    let timeToDisplay = `${datePublished.getHours()}:${datePublished.getMinutes()} am`;\n    if (datePublished.getHours() > 12) {\n      timeToDisplay = `${datePublished.getHours() -\n        12}:${datePublished.getMinutes()} pm`;\n    }\n    const dateToDisplay = `${\n      daysOfWeek[datePublished.getDay() + 1]\n    } ${datePublished.getDate()} ${\n      months[datePublished.getMonth() + 1]\n    } at ${timeToDisplay}`;\n\n    return (\n      <div className={bodyClass} onClick={this.handleClick}>\n        <div className={style.title}>{this.props.post.title}</div>\n        {/* <div >{props.post.url}</div> */}\n        <div className={style.secondLine}>\n          <div className={style.author}>by {this.props.post.author}</div>\n          <PostButton type=\"star\" value={this.props.post.star} />\n        </div>\n\n        {/* <div>{props.post.parsed}</div> */}\n        <div\n          className={style.text}\n          dangerouslySetInnerHTML={{ __html: text }}\n        />\n        <div className={style.statusLine}>\n          <div>{dateToDisplay}</div>\n          <div>~ {Math.round(this.props.post.text.length / 3000)} pages</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({ selectPost: selectPost }, dispatch);\n};\n\nconst mapStateToProps = state => {\n  return {\n    selectedPost: state.selectedPost\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(PostCard);\n","import React from 'react';\n\nimport PostButton from '../../elements/PostButton/PostButton';\nimport style from './PostShow.module.scss';\nconst months = {\n  1: 'Jan',\n  2: 'Feb',\n  3: 'Mar',\n  4: 'Apr',\n  5: 'May',\n  6: 'Jun',\n  7: 'Jul',\n  8: 'Aug',\n  9: 'Sep',\n  10: 'Oct',\n  11: 'Nov',\n  12: 'Dec'\n};\nconst daysOfWeek = {\n  1: 'Sun',\n  2: 'Mon',\n  3: 'Tue',\n  4: 'Wed',\n  5: 'Thu',\n  6: 'Fri',\n  7: 'Sat'\n};\nconst postShow = props => {\n  // const text = props.post.text\n  //   .replace(/<(?:.|\\n)*?>/gm, \"\");\n  const text = props.post.text;\n\n  // <div>{props.post.read}</div>;\n  const bodyClass = style.body;\n  // < div className = { style.star } > { props.post.star }</div>\n  const datePublished = new Date(props.post.published);\n  let timeToDisplay = `${datePublished.getHours()}:${datePublished.getMinutes()} am`;\n  if (datePublished.getHours() > 12) {\n    timeToDisplay = `${datePublished.getHours() -\n      12}:${datePublished.getMinutes()} pm`;\n  }\n  const dateToDisplay = `${\n    daysOfWeek[datePublished.getDay() + 1]\n  } ${datePublished.getDate()} ${\n    months[datePublished.getMonth() + 1]\n  } at ${timeToDisplay}`;\n\n  return (\n    <div className={style.body}>\n      <div className={style.title}>{props.post.title}</div>\n      {/* <div >{props.post.url}</div> */}\n      <div className={style.secondLine}>\n        <div className={style.author}>by {props.post.author}</div>\n        <div className={style.buttonsWrapper}>\n          <PostButton type=\"star\" value={props.post.star} />\n          <PostButton type=\"delete\" />\n        </div>\n      </div>\n      {/* <div>{props.post.parsed}</div> */}\n      <div className={style.text} dangerouslySetInnerHTML={{ __html: text }} />\n      <div className={style.divider} />\n\n      <div className={style.statusLine}>\n        <div>{dateToDisplay}</div>\n        <div>~ {Math.round(props.post.text.length / 3000)} pages</div>\n      </div>\n    </div>\n  );\n};\nexport default postShow;\n","import React from 'react';\n// Redux\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\n// Actions\nimport { setPosts } from '../actions';\n\nimport PostCard from './PostCard';\nimport PostShow from '../components/Post/PostShow';\n\nimport style from './ContentDisplay.module.scss';\n\nclass ContentDisplay extends React.Component {\n  componentWillMount() {\n    this.fetchMessages();\n  }\n\n  componentDidMount() {\n    this.refresher = setInterval(this.fetchMessages, 5000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.refresher);\n  }\n\n  fetchMessages = () => {\n    this.props.setPosts();\n  };\n\n  render() {\n    const postId = '5c96634c1580d234f5a062d2';\n    const selected = 0;\n    // console.log(this.props.selectPost)\n    // this.props.posts.map(post => {\n    //   if (post.id === (postId)) {\n    //     return post\n    //   }\n    // })\n    if (this.props.selectPost === '') {\n      return (\n        <div className={style.contentFlex}>\n          {this.props.posts.map(post => {\n            return (\n              <div>\n                <PostCard post={post} key={post.title} />\n                <div className={style.divider} />\n              </div>\n            );\n          })}\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <PostShow post={this.props.selectPost} />\n        </div>\n      );\n    }\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({ setPosts }, dispatch);\n};\n\nconst mapStateToProps = state => {\n  return {\n    posts: state.posts,\n    selectPost: state.selectPost\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ContentDisplay);\n","import React from 'react';\n\nimport TitleBar from '../TitleBar/TitleBar';\nimport NavMenu from '../NavMenu/NavMenu';\nimport ContentDisplay from '../../containers/ContentDisplay';\nimport styles from './App.module.scss';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <TitleBar />\n        <ContentDisplay />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux';\nimport { logger } from 'redux-logger';\nimport reduxPromise from 'redux-promise';\n\nimport postsReducer from './reducers/posts_reducer';\nimport selectPostReducer from './reducers/select_post_reducer';\n\nimport WebFont from 'webfontloader';\n\n// load components\nimport App from './components/App/App';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\n\n// loading fonts\nWebFont.load({\n  google: {\n    families: ['Aleo:300,300i,400,400i,700']\n  }\n});\n\nconst initialState = {\n  posts: [],\n  selectPost: ''\n};\n\n// Define reducers\nconst reducers = combineReducers({\n  posts: postsReducer,\n  selectPost: selectPostReducer\n});\n// Add logger\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst middlewares = composeEnhancers(applyMiddleware(reduxPromise, logger));\n\nReactDOM.render(\n  <Provider store={createStore(reducers, initialState, middlewares)}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export default (state = [], action) => {\n  // Handle actions\n  switch (action.type) {\n    case 'SET_POSTS':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n","export default (state = [], action) => {\n  // Handle actions\n  switch (action.type) {\n    case 'SELECT_POST':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"PostCard_body__2I6bR\",\"bodyFlex\":\"PostCard_bodyFlex__2X7Bs\",\"title\":\"PostCard_title__LR8kW\",\"secondLine\":\"PostCard_secondLine__rg0kU\",\"text\":\"PostCard_text__2f76t\",\"statusLine\":\"PostCard_statusLine__XPYNl\",\"article-source\":\"PostCard_article-source__2QZcT\",\"article-footer\":\"PostCard_article-footer__rgalt\",\"article-link\":\"PostCard_article-link__1N0Ta\",\"star\":\"PostCard_star__3kMP7\",\"star-on\":\"PostCard_star-on__9OaHG\"};"],"sourceRoot":""}